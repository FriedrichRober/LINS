gap> Read("lowIndexNormal.gd");;
gap> [ "$C_2*C_5$", FreeProduct(CyclicGroup(2),CyclicGroup(5)), 2000, 266.68 ];;
gap> current := last;;
gap> groupname := current[1];
"$C_2*C_5$"
gap> g := current[2];
<fp group on the generators [ f1, f2 ]>
gap> maxIndex := current[3];
2000
gap> m := LowIndexNormal(g, maxIndex);
Error, List Elements: <list>[289] must have an assigned value in
  qs!.images{generators} := gens{[ 1 .. d ]}
 ; at /usr/local/lib/gap4r8/lib/pquot.gi:1347 called from 
AbelianPQuotient( qs ); at /usr/local/lib/gap4r8/lib/pquot.gi:1458 called from
PQuotient( G, p, c, ngens 
 ) at /usr/local/lib/gap4r8/lib/pquot.gi:1537 called from
EpimorphismPGroup( IH, p, 1 ) at ./findPQuotients.gi:47 called from
FindPQuotients( GroupsFound, n, Current 
 ) at ./lowIndexNormal.gi:102 called from
<function "LowIndexNormal">( <arguments> )
 called from read-eval loop at line 7 of *stdin*
you can 'return;' after assigning a value
qs;
<2-quotient system of 2-class 0 with 0 generators>
brk> gens;
[ a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, 
  a32, a33, a34, a35, a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a60, 
  a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a80, a81, a82, a83, a84, a85, a86, a87, a88, a89, 
  a90, a91, a92, a93, a94, a95, a96, a97, a98, a99, a100, a101, a102, a103, a104, a105, a106, a107, a108, a109, a110, a111, a112, a113, a114, a115, 
  a116, a117, a118, a119, a120, a121, a122, a123, a124, a125, a126, a127, a128, a129, a130, a131, a132, a133, a134, a135, a136, a137, a138, a139, 
  a140, a141, a142, a143, a144, a145, a146, a147, a148, a149, a150, a151, a152, a153, a154, a155, a156, a157, a158, a159, a160, a161, a162, a163, 
  a164, a165, a166, a167, a168, a169, a170, a171, a172, a173, a174, a175, a176, a177, a178, a179, a180, a181, a182, a183, a184, a185, a186, a187, 
  a188, a189, a190, a191, a192, a193, a194, a195, a196, a197, a198, a199, a200, a201, a202, a203, a204, a205, a206, a207, a208, a209, a210, a211, 
  a212, a213, a214, a215, a216, a217, a218, a219, a220, a221, a222, a223, a224, a225, a226, a227, a228, a229, a230, a231, a232, a233, a234, a235, 
  a236, a237, a238, a239, a240, a241, a242, a243, a244, a245, a246, a247, a248, a249, a250, a251, a252, a253, a254, a255, a256 ]
brk> IH;
<fp group of size infinity with 289 generators>
brk> GeneratorsOfGroup(IH);
[ F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, F30, F31, 
  F32, F33, F34, F35, F36, F37, F38, F39, F40, F41, F42, F43, F44, F45, F46, F47, F48, F49, F50, F51, F52, F53, F54, F55, F56, F57, F58, F59, F60, 
  F61, F62, F63, F64, F65, F66, F67, F68, F69, F70, F71, F72, F73, F74, F75, F76, F77, F78, F79, F80, F81, F82, F83, F84, F85, F86, F87, F88, F89, 
  F90, F91, F92, F93, F94, F95, F96, F97, F98, F99, F100, F101, F102, F103, F104, F105, F106, F107, F108, F109, F110, F111, F112, F113, F114, F115, 
  F116, F117, F118, F119, F120, F121, F122, F123, F124, F125, F126, F127, F128, F129, F130, F131, F132, F133, F134, F135, F136, F137, F138, F139, 
  F140, F141, F142, F143, F144, F145, F146, F147, F148, F149, F150, F151, F152, F153, F154, F155, F156, F157, F158, F159, F160, F161, F162, F163, 
  F164, F165, F166, F167, F168, F169, F170, F171, F172, F173, F174, F175, F176, F177, F178, F179, F180, F181, F182, F183, F184, F185, F186, F187, 
  F188, F189, F190, F191, F192, F193, F194, F195, F196, F197, F198, F199, F200, F201, F202, F203, F204, F205, F206, F207, F208, F209, F210, F211, 
  F212, F213, F214, F215, F216, F217, F218, F219, F220, F221, F222, F223, F224, F225, F226, F227, F228, F229, F230, F231, F232, F233, F234, F235, 
  F236, F237, F238, F239, F240, F241, F242, F243, F244, F245, F246, F247, F248, F249, F250, F251, F252, F253, F254, F255, F256, F257, F258, F259, 
  F260, F261, F262, F263, F264, F265, F266, F267, F268, F269, F270, F271, F272, F273, F274, F275, F276, F277, F278, F279, F280, F281, F282, F283, 
  F284, F285, F286, F287, F288, F289 ]
brk> RelatorsOfFpGroup(IH);
[  ]


IH := FreeGroup(289);
<free group with 289 generators>
gap> IH := IH / [];
<fp group of size infinity with 289 generators>
gap> EpimorphismPGroup(IH,2,1); 
Error, List Elements: <list>[289] must have an assigned value in
  qs!.images{generators} := gens{[ 1 .. d ]}; at /usr/local/lib/gap4r8/lib/pquot.gi:1347 called from 
AbelianPQuotient( qs ); at /usr/local/lib/gap4r8/lib/pquot.gi:1458 called from
PQuotient( G, p, c, ngens ) at /usr/local/lib/gap4r8/lib/pquot.gi:1537 called from
<function "unknown">( <arguments> )
 called from read-eval loop at line 14 of *stdin*
you can 'return;' after assigning a value




Read("lowIndexNormal.gd");;
[ "$C_2*C_5$", FreeProduct(CyclicGroup(2),CyclicGroup(5)), 2000, 266.68 ];;
current := last;;
g := current[2];
maxIndex := current[3];
m := LowIndexNormal(g, maxIndex);



